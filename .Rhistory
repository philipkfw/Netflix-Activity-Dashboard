)
unique(genre_split_df$Genre_Category)
treemap_plot <- genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category)) +
geom_treemap()
treemap_plot
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre", grow = TRUE)
# split Genres with multiple values into multiple rows with a single value
genre_split_df <- separate_rows(manipulated_df, Genre, sep = ",") %>%
mutate(Genre = str_trim(Genre, side = c("both"))) %>%
mutate(
Genre_Category = case_when(
Genre %in% c("Action & Adventure", "Western") ~ "Action",
Genre %in% c("Animation", "Fantasy") ~ "Fictional Cartoons",
Genre %in% c("Documentary", "Reality TV", "Sport", "History") ~ "Non-Fiction",
Genre %in% c("Horror", "Crime", "Thriller") ~ "Dark",
TRUE ~ Genre
)
)
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre", grow = TRUE)
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category, label = Genre_Category)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre", grow = TRUE)
genre_split_df %>%
group_by(Genre_Category) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category, label = Genre_Category)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre", grow = TRUE)
genre_split_df %>%
group_by(Genre_Category) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category, label = Total_Content)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre", grow = TRUE)
genre_split_df %>%
group_by(Genre_Category) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category, label = Total_Content)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category, label = Total_Content, subgroup = Genre)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre_Category, label = Total_Content, subgroup = Genre)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
ggplotly(
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre"))
ggplotly(
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
)
plotly(
genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
)
test <- genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
plotly(test)
test <- genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup() %>%
ggplot(aes(area = Total_Content, fill = Genre, label = Total_Content, subgroup = Genre_Category)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_text(fontface = "italic", color = "white", place = "centre")
test
install.packages("d3treeR")
install.packages("d3Tree")
test <- genre_split_df %>%
group_by(Genre_Category, Genre) %>%
summarise(Total_Content = n_distinct(Title)) %>%
ungroup()
# treemap_plot
treemap <- treemap(
test,
index=c("Genre_Category","Genre"),
vSize="Total_Content",
type="index",
palette = "Set2",
bg.labels=c("white"),
align.labels=list(
c("center","center"),
c("right","bottom")
)
)
inter <- d3Tree::d3tree(treemap, rootname = "General")
library(d3Tree)
inter <- d3Tree::d3tree(treemap, rootname = "General")
inter <- d3Tree::d3tree(treemap, rootname = "General")
plotly(treemap)
# treemap_plot
treemap <- treemap(
test,
index=c("Genre_Category","Genre"),
vSize="Total_Content",
type="index",
palette = "Set2",
bg.labels=c("white"),
align.labels=list(
c("center","center"),
c("right","bottom")
)
)
plotly(treemap)
View(manipulated_df)
View(manipulated_df)
# working directory
library(rstudioapi)
if(rstudioapi::isAvailable()){
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
# # run data pull script
# source("../Daily Seafood/Daily Seafood - Data Pulls.R")
library(tidyverse)
library(gridExtra) # to plot multiple ggplot objects
library(scales)
library(lubridate)
library(readxl)
library(readr)
library(zoo)
library(reshape2)
library(kableExtra)
library(flexdashboard)
library(htmlwidgets)
library(DT)
library(shiny)
library(plotly)
library(treemap)
library(highcharter)
library(viridisLite)
library(data.table)
#==========================================================================
# Import datasets ---------------------------------------------------------
#==========================================================================
# Aug_Sept_2021_df <- read_excel("input/August September 2021 Retail.xlsx")
# Oct_Nov_2021_df <- read_excel("input/October November 2021 Retail.xlsx")
# Dec_Jan_2021_df <- read_excel("input/December January 28 Retail.xlsx")
# specifies all xlsx files within our input folder
file_names <- list.files(
path = "input",
pattern = "*.xlsx",
full.names = TRUE)
for (i in file_names){
df <- read_excel((i))
assign(substr(i, 7, nchar(i)) , df)
rm(df)
}
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
binded_df <- as.data.frame(do.call(rbind, list_dataframes)) # bind into a single dataframe
library(rstudioapi)
if(rstudioapi::isAvailable()){
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
# # run data pull script
# source("../Daily Seafood/Daily Seafood - Data Pulls.R")
library(tidyverse)
library(gridExtra) # to plot multiple ggplot objects
library(scales)
library(lubridate)
library(readxl)
library(readr)
library(zoo)
library(reshape2)
library(kableExtra)
library(flexdashboard)
library(htmlwidgets)
library(DT)
library(shiny)
library(plotly)
library(treemap)
library(highcharter)
library(viridisLite)
library(data.table)
# specifies all xlsx files within our input folder
file_names <- list.files(
path = "input",
pattern = "*.xlsx",
full.names = TRUE)
file_names
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
binded_df <- as.data.frame(do.call(rbind, list_dataframes)) # bind into a single dataframe
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
binded_df <- as.data.frame(do.call(rbind, list_dataframes)) # bind into a single dataframe
# working directory
library(rstudioapi)
if(rstudioapi::isAvailable()){
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
# # run data pull script
# source("../Daily Seafood/Daily Seafood - Data Pulls.R")
library(tidyverse)
library(gridExtra) # to plot multiple ggplot objects
library(scales)
library(lubridate)
library(readxl)
library(readr)
library(zoo)
library(reshape2)
library(kableExtra)
library(flexdashboard)
library(htmlwidgets)
library(DT)
library(shiny)
library(plotly)
library(treemap)
library(highcharter)
library(viridisLite)
library(data.table)
# specifies all xlsx files within our input folder
file_names <- list.files(
path = "input",
pattern = "*.xlsx",
full.names = TRUE)
file_names
for (i in file_names){
df <- read_excel((i))
assign(substr(i, 7, nchar(i)) , df)
rm(df)
}
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
binded_df <- as.data.frame(do.call(rbind, list_dataframes)) # bind into a single dataframe
View(`Jan 13 to today.xlsx`)
View(`December January 28 Retail.xlsx`)
rm(list_dataframes)
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
list_dataframes
binded_df <- as.data.frame(do.call(rbind, list_dataframes))
names(`Jan 13 to today.xlsx`)
colnames(`Jan 13 to today.xlsx`) <- as.vector(colnames(`Jan 13 to today.xlsx`))
library(rstudioapi)
if(rstudioapi::isAvailable()){
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
# # run data pull script
# source("../Daily Seafood/Daily Seafood - Data Pulls.R")
library(tidyverse)
library(gridExtra) # to plot multiple ggplot objects
library(scales)
library(lubridate)
library(readxl)
library(readr)
library(zoo)
library(reshape2)
library(kableExtra)
library(flexdashboard)
library(htmlwidgets)
library(DT)
library(shiny)
library(plotly)
library(treemap)
library(highcharter)
library(viridisLite)
library(data.table)
#==========================================================================
# Import datasets ---------------------------------------------------------
#==========================================================================
# Aug_Sept_2021_df <- read_excel("input/August September 2021 Retail.xlsx")
# Oct_Nov_2021_df <- read_excel("input/October November 2021 Retail.xlsx")
# Dec_Jan_2021_df <- read_excel("input/December January 28 Retail.xlsx")
# specifies all xlsx files within our input folder
file_names <- list.files(
path = "input",
pattern = "*.xlsx",
full.names = TRUE)
for (i in file_names){
df <- read_excel((i))
assign(substr(i, 7, nchar(i)) , df)
rm(df)
}
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
binded_df <- as.data.frame(do.call(rbind, list_dataframes)) # bind into a single dataframe
View(`August September 2021 Retail.xlsx`)
View(`December January 28 Retail.xlsx`)
View(`Jan 13 to today.xlsx`)
names(`October November 2021 Retail.xlsx`)
colnames(`Jan 13 to today.xlsx`[colnames(`Jan 13 to today.xlsx`$`Order #`)]) <- "Order Number"
colnames(`Jan 13 to today.xlsx`$`Order #`)
library(rstudioapi)
if(rstudioapi::isAvailable()){
path <- rstudioapi::getActiveDocumentContext()$path
Encoding(path) <- "UTF-8"
setwd(dirname(path))
}
# # run data pull script
# source("../Daily Seafood/Daily Seafood - Data Pulls.R")
library(tidyverse)
library(gridExtra) # to plot multiple ggplot objects
library(scales)
library(lubridate)
library(readxl)
library(readr)
library(zoo)
library(reshape2)
library(kableExtra)
library(flexdashboard)
library(htmlwidgets)
library(DT)
library(shiny)
library(plotly)
library(treemap)
library(highcharter)
library(viridisLite)
library(data.table)
#==========================================================================
# Import datasets ---------------------------------------------------------
#==========================================================================
# Aug_Sept_2021_df <- read_excel("input/August September 2021 Retail.xlsx")
# Oct_Nov_2021_df <- read_excel("input/October November 2021 Retail.xlsx")
# Dec_Jan_2021_df <- read_excel("input/December January 28 Retail.xlsx")
# specifies all xlsx files within our input folder
file_names <- list.files(
path = "input",
pattern = "*.xlsx",
full.names = TRUE)
for (i in file_names){
df <- read_excel((i))
assign(substr(i, 7, nchar(i)) , df)
rm(df)
}
# Bind datasets into single dataframe -------------------------------------
# listing all the dataframes stored in our global environment
list_dataframes <- Filter(function(x) is(x, "data.frame"), mget(ls()))
binded_df <- as.data.frame(do.call(rbind, list_dataframes)) # bind into a single dataframe
# remove individual monthly sales dataframes (for cleanliness)
rm(list=ls(pattern=".xlsx|list_dataframes"))
dsf_df <- binded_df %>%
dplyr::filter(Status == "Paid") %>%
dplyr::rename(Order_Total = Total) %>%
mutate(
Category = case_when(
str_detect(tolower(`Product Name`), "oyster") & is.na(Category) ~ "Shellfish",
str_detect(tolower(`Product Name`), "mackerel") & is.na(Category) ~ "Fin Fish",
TRUE ~ Category
),
Total = round(Price * Quantity, 2),
Month = format(as.Date(`Fulfillment Date`, format = "%Y-%m-%d"), "%b"),
Year = format(as.Date(`Fulfillment Date`, format = "%Y-%m-%d"), "%Y"),
WeekStartDate = as.Date(cut(as.Date(`Fulfillment Date`), "week"), "%Y-%m-%d"),
Units = str_to_title(Units),
City = str_to_title(City),
IsDiscounted = case_when(is.na(`Discount code`) ~ "No", TRUE ~ "Yes"),
Product = trimws(str_extract(string = `Product Name`, pattern = "[^-]+"),"r"), # trim trailing white space
Quantity_Category = case_when(
Quantity <= 1 ~ '1',
Quantity <= 5 ~ '2-5',
Quantity > 5 ~ '6+',
TRUE ~ 'Null'
),
Product_Description = paste0(Product, " in ", Units, "(s)"),  # concatenation of product w/ quantity
Product_Details = sub(".* - ","",sub(",.*", "", `Product Name`))
) %>%
select(-c(
# `Product Name`,
Instructions,
`Inventory Code`,
`Discount code`,
`Fulfillment Type`,
`Full Address`,
# `Service Location`,
Order_Total,
Tip,
`Delivery Fee`,
`Total discount amount`,
Status,
`Total Fees (delivery, taxes & tips)`,
`Refunded Amount`)) %>%
relocate(Total, .before = Name) %>%
relocate(Quantity, .after = Price) %>%
relocate(Product, .before = Units) %>%
relocate(Product_Details, .before = Units)
color_scale <- c("#3399FF","#9999CC","#0033FF","#33CCFF","#9900FF","#CCCCCC")
# Source URL:
# https://beta.rstudioconnect.com/jjallaire/htmlwidgets-highcharter/htmlwidgets-highcharter.html#sales-by-category
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
dsf_product_mix_df <- dsf_df %>%
arrange(Product) %>%
group_by(Year, Month, `Invoice Number`) %>%
mutate(Order_items = paste0(unique(Product), collapse = ", ")) %>%
summarise(
Order_items,
Total_Products = n_distinct(Product)) %>%
filter(Total_Products > 1) %>%
ungroup() %>%
group_by(Year, Month, Order_items) %>%
summarise(Order_Frequency = n_distinct(`Invoice Number`)) %>%
ungroup() %>%
arrange(desc(Order_Frequency))
# Exporting data ----------------------------------------------------------
fn <- paste("output/","dsf_df",".csv", sep = "")
if(file.exists(fn)){file.remove(fn)}
write_csv(as.data.frame(dsf_df), fn)
rm(fn)
fn <- paste("output/","dsf_product_mix_df",".csv", sep = "")
if(file.exists(fn)){file.remove(fn)}
write_csv(as.data.frame(dsf_product_mix_df), fn)
rm(fn)
install.packages("devtools")
devtools::install_github("gadenbuie/rsthemes")
rsthemes::install_rsthemes(include_base16 = TRUE)
rstudioapi::applyTheme("a11y-dark {rsthemes}")
